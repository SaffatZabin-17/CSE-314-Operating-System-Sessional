diff --git a/Makefile b/Makefile
index 39a99d7..ee32cbe 100644
--- a/Makefile
+++ b/Makefile
@@ -132,6 +132,8 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
+	$U/_testprocinfo\
+	$U/_dummyproc\
 
 fs.img: mkfs/mkfs README $(UPROGS)
 	mkfs/mkfs fs.img README $(UPROGS)
@@ -153,7 +155,7 @@ QEMUGDB = $(shell if $(QEMU) -help | grep -q '^-gdb'; \
 	then echo "-gdb tcp::$(GDBPORT)"; \
 	else echo "-s -p $(GDBPORT)"; fi)
 ifndef CPUS
-CPUS := 3
+CPUS := 1
 endif
 
 QEMUOPTS = -machine virt -bios none -kernel $K/kernel -m 128M -smp $(CPUS) -nographic
diff --git a/kernel/defs.h b/kernel/defs.h
index a3c962b..6588a22 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -8,6 +8,7 @@ struct spinlock;
 struct sleeplock;
 struct stat;
 struct superblock;
+struct pstat;
 
 // bio.c
 void            binit(void);
@@ -103,6 +104,9 @@ void            userinit(void);
 int             wait(uint64);
 void            wakeup(void*);
 void            yield(void);
+int             settickets(int);
+int             getpinfo(uint64);
+long            random_at_most(long);
 int             either_copyout(int user_dst, uint64 dst, void *src, uint64 len);
 int             either_copyin(void *dst, int user_src, uint64 src, uint64 len);
 void            procdump(void);
diff --git a/kernel/param.h b/kernel/param.h
index 6624bff..39fb5b5 100644
--- a/kernel/param.h
+++ b/kernel/param.h
@@ -11,3 +11,7 @@
 #define NBUF         (MAXOPBLOCKS*3)  // size of disk block cache
 #define FSSIZE       2000  // size of file system in blocks
 #define MAXPATH      128   // maximum file path name
+#define TIME_LIMIT_1 1
+#define TIME_LIMIT_2 2
+#define BOOST_INTERVAL 64
+#define DEFAULT_TICKET_COUNT 10
diff --git a/kernel/proc.c b/kernel/proc.c
index 959b778..aca0e8e 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -5,6 +5,9 @@
 #include "spinlock.h"
 #include "proc.h"
 #include "defs.h"
+#include "pstat.h"
+#include "rand.h"
+#include "rand.c"
 
 struct cpu cpus[NCPU];
 
@@ -125,6 +128,10 @@ found:
   p->pid = allocpid();
   p->state = USED;
 
+  p->ticket_original = DEFAULT_TICKET_COUNT;
+  p->time_slices = 0;
+  p->priority = 0;
+
   // Allocate a trapframe page.
   if((p->trapframe = (struct trapframe *)kalloc()) == 0){
     freeproc(p);
@@ -295,6 +302,7 @@ fork(void)
     return -1;
   }
   np->sz = p->sz;
+  np->ticket_original = p->ticket_original;
 
   // copy saved user registers.
   *(np->trapframe) = *(p->trapframe);
@@ -434,6 +442,62 @@ wait(uint64 addr)
   }
 }
 
+int
+settickets(int tickets)
+{
+  struct proc *p = myproc();
+  int pid = p->pid;
+
+  acquire(&p->lock);
+
+  struct proc *pr;
+  for (pr = proc; pr < &proc[NPROC]; pr++) {
+    if (pr->pid == pid) {
+      pr->ticket_original = tickets;
+      release(&p->lock);
+      return 0;
+    }
+  }
+
+  release(&p->lock);
+  return 0;
+}
+
+int
+getpinfo(uint64 addr)
+{
+  struct proc *p;
+  struct pstat pstat;
+  struct spinlock *lk = &wait_lock;
+  acquire(lk);
+  int i = 0;
+  for(p = proc; p < &proc[NPROC]; p++) {
+    pstat.pid[i] = p->pid;
+    pstat.inuse[i] = p->state != UNUSED;
+    pstat.inQ[i] = p->priority;
+    pstat.tickets_original[i] = p->ticket_original;
+    pstat.tickets_current[i] = p->ticket_current;
+    pstat.time_slices[i] = p->time_slices;
+    i++;
+  }
+  release(lk);
+
+  copyout(myproc()->pagetable, addr, (char *)&pstat, sizeof(pstat));
+  return 0;
+}
+
+int
+get_runnable_proc_tickets(void){
+  struct proc *p;
+  int total = 0;
+
+  for(p = proc; p < &proc[NPROC]; p++) {
+    if (p->state == RUNNABLE && p->priority == 0) {
+      total += p->ticket_current;
+    }
+  }
+  return total;
+}
 // Per-CPU process scheduler.
 // Each CPU calls scheduler() after setting itself up.
 // Scheduler never returns.  It loops, doing:
@@ -447,26 +511,122 @@ scheduler(void)
   struct proc *p;
   struct cpu *c = mycpu();
   
+  acquire(&tickslock);
+  int start_time = ticks;     //Boost Interval
+  release(&tickslock);
+
   c->proc = 0;
   for(;;){
     // Avoid deadlock by ensuring that devices can interrupt.
     intr_on();
 
-    for(p = proc; p < &proc[NPROC]; p++) {
-      acquire(&p->lock);
-      if(p->state == RUNNABLE) {
-        // Switch to chosen process.  It is the process's job
-        // to release its lock and then reacquire it
-        // before jumping back to us.
-        p->state = RUNNING;
-        c->proc = p;
-        swtch(&c->context, &p->context);
-
-        // Process is done running for now.
-        // It should have changed its p->state before coming back.
-        c->proc = 0;
+    acquire(&tickslock);
+
+    int end_time = ticks;
+
+    release(&tickslock);
+
+    if (end_time - start_time >= BOOST_INTERVAL) {
+      for(p = proc; p < &proc[NPROC]; p++) {
+        acquire(&p->lock);
+        if(p->state != UNUSED && p->priority == 1) {
+          p->priority = 0;
+          p->ticket_current = p->ticket_original;
+        }
+        release(&p->lock);
+      }
+      start_time = end_time;
+    }
+
+    long cummulative_sum = 0;
+
+    long total_tickets = 0;
+
+    while(1)
+    {
+      total_tickets  = get_runnable_proc_tickets() * 1LL;
+
+      if(total_tickets == 0)
+      {
+        for(p = proc; p < &proc[NPROC]; p++) {
+          p->ticket_current = p->ticket_original;
+        }
+      }
+      else
+      {
+        break;
+      }
+    }
+
+    if(total_tickets > 0){                 //Lottery Scheduling
+      long winner_tickets = random_at_most(total_tickets);
+      for(p = proc; p < &proc[NPROC]; p++) {
+        if(p->state == RUNNABLE && p->priority == 0) {
+
+            cummulative_sum += p->ticket_current;
+
+            if (cummulative_sum >= winner_tickets) {
+
+              for(int i=0;i<TIME_LIMIT_1;i++){
+                acquire(&p->lock);
+                if(p->state == RUNNABLE && p->priority == 0) {
+                  // Switch to chosen process.  It is the process's job
+                  // to release its lock and then reacquire it
+                  // before jumping back to us.
+                  p->ticket_current--;
+                  if(p->ticket_current <= 0){
+                    p->priority = 1;
+                  }
+                  p->state = RUNNING;
+                  c->proc = p;
+                  swtch(&c->context, &p->context);
+                  // Process is done running for now.
+                  p->time_slices++;
+
+                  // Process is done running for now.
+                  // It should have changed its p->state before coming back.
+                  c->proc = 0;
+                }
+                release(&p->lock);
+              }
+            break;
+          }
+        }
+      }
+    }
+
+    else{                             //Round robin
+      for(p = proc; p < &proc[NPROC]; p++) {
+        acquire(&p->lock);
+        if(p->priority == 1) {
+          for(int i=0;i<TIME_LIMIT_2;i++){
+            if(p->state == RUNNABLE) {
+              // Switch to chosen process.  It is the process's job
+              // to release its lock and then reacquire it
+              // before jumping back to us.
+              p->state = RUNNING;
+              c->proc = p;
+              swtch(&c->context, &p->context);
+              // Process is done running for now.
+              p->time_slices++;
+
+              // Process is done running for now.
+              // It should have changed its p->state before coming back.
+              c->proc = 0;
+            }
+            else if(p->state == SLEEPING){
+              p->priority = 0;
+            }
+            else if(p->state == ZOMBIE){
+              p->priority = 0;
+            }
+          }
+          // Switch to chosen process.  It is the process's job
+          // to release its lock and then reacquire it
+          // before jumping back to us.
+        }
+        release(&p->lock);
       }
-      release(&p->lock);
     }
   }
 }
diff --git a/kernel/proc.h b/kernel/proc.h
index d021857..d41b39d 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -91,6 +91,7 @@ struct proc {
   int killed;                  // If non-zero, have been killed
   int xstate;                  // Exit status to be returned to parent's wait
   int pid;                     // Process ID
+  int priority;                // Process priority- For Scheduling offline
 
   // wait_lock must be held when using this:
   struct proc *parent;         // Parent process
@@ -104,4 +105,7 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+  int ticket_original;
+  int ticket_current;
+  int time_slices;
 };
diff --git a/kernel/pstat.h b/kernel/pstat.h
new file mode 100644
index 0000000..91499fb
--- /dev/null
+++ b/kernel/pstat.h
@@ -0,0 +1,14 @@
+#ifndef _PSTAT_H_
+#define _PSTAT_H_
+#include "param.h"
+
+struct pstat {
+  int pid[NPROC]; // the process ID of each process
+  int inuse[NPROC]; // whether this slot of the process table is being used (1 or 0)
+  int inQ[NPROC]; // which queue the process is currently in
+  int tickets_original[NPROC]; // the number of tickets each process originally had
+  int tickets_current[NPROC]; // the number of tickets each process currently has
+  int time_slices[NPROC]; // the number of time slices each process has been scheduled
+};
+
+#endif // _PSTAT_H_
diff --git a/kernel/rand.c b/kernel/rand.c
new file mode 100755
index 0000000..1630f8e
--- /dev/null
+++ b/kernel/rand.c
@@ -0,0 +1,120 @@
+/* A C-program for MT19937: Real number version                */
+/*   genrand() generates one pseudorandom real number (double) */
+/* which is uniformly distributed on [0,1]-interval, for each  */
+/* call. sgenrand(seed) set initial values to the working area */
+/* of 624 words. Before genrand(), sgenrand(seed) must be      */
+/* called once. (seed is any 32-bit integer except for 0).     */
+/* Integer generator is obtained by modifying two lines.       */
+/*   Coded by Takuji Nishimura, considering the suggestions by */
+/* Topher Cooper and Marc Rieffel in July-Aug. 1997.           */
+
+/* This library is free software; you can redistribute it and/or   */
+/* modify it under the terms of the GNU Library General Public     */
+/* License as published by the Free Software Foundation; either    */
+/* version 2 of the License, or (at your option) any later         */
+/* version.                                                        */
+/* This library is distributed in the hope that it will be useful, */
+/* but WITHOUT ANY WARRANTY; without even the implied warranty of  */
+/* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.            */
+/* See the GNU Library General Public License for more details.    */
+/* You should have received a copy of the GNU Library General      */
+/* Public License along with this library; if not, write to the    */
+/* Free Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA   */
+/* 02111-1307  USA                                                 */
+
+/* Copyright (C) 1997 Makoto Matsumoto and Takuji Nishimura.       */
+/* Any feedback is very welcome. For any question, comments,       */
+/* see http://www.math.keio.ac.jp/matumoto/emt.html or email       */
+/* matumoto@math.keio.ac.jp                                        */
+
+/* Period parameters */
+#define N 624
+#define M 397
+#define MATRIX_A 0x9908b0df   /* constant vector a */
+#define UPPER_MASK 0x80000000 /* most significant w-r bits */
+#define LOWER_MASK 0x7fffffff /* least significant r bits */
+
+/* Tempering parameters */
+#define TEMPERING_MASK_B 0x9d2c5680
+#define TEMPERING_MASK_C 0xefc60000
+#define TEMPERING_SHIFT_U(y)  (y >> 11)
+#define TEMPERING_SHIFT_S(y)  (y << 7)
+#define TEMPERING_SHIFT_T(y)  (y << 15)
+#define TEMPERING_SHIFT_L(y)  (y >> 18)
+
+#define RAND_MAX 0x7fffffff
+
+static unsigned long mt[N]; /* the array for the state vector  */
+static int mti=N+1; /* mti==N+1 means mt[N] is not initialized */
+
+/* initializing the array with a NONZERO seed */
+void
+sgenrand(unsigned long seed)
+{
+    /* setting initial seeds to mt[N] using         */
+    /* the generator Line 25 of Table 1 in          */
+    /* [KNUTH 1981, The Art of Computer Programming */
+    /*    Vol. 2 (2nd Ed.), pp102]                  */
+    mt[0]= seed & 0xffffffff;
+    for (mti=1; mti<N; mti++)
+        mt[mti] = (69069 * mt[mti-1]) & 0xffffffff;
+}
+
+long /* for integer generation */
+genrand()
+{
+    unsigned long y;
+    static unsigned long mag01[2]={0x0, MATRIX_A};
+    /* mag01[x] = x * MATRIX_A  for x=0,1 */
+
+    if (mti >= N) { /* generate N words at one time */
+        int kk;
+
+        if (mti == N+1)   /* if sgenrand() has not been called, */
+            sgenrand(4357); /* a default initial seed is used   */
+
+        for (kk=0;kk<N-M;kk++) {
+            y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
+            mt[kk] = mt[kk+M] ^ (y >> 1) ^ mag01[y & 0x1];
+        }
+        for (;kk<N-1;kk++) {
+            y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
+            mt[kk] = mt[kk+(M-N)] ^ (y >> 1) ^ mag01[y & 0x1];
+        }
+        y = (mt[N-1]&UPPER_MASK)|(mt[0]&LOWER_MASK);
+        mt[N-1] = mt[M-1] ^ (y >> 1) ^ mag01[y & 0x1];
+
+        mti = 0;
+    }
+
+    y = mt[mti++];
+    y ^= TEMPERING_SHIFT_U(y);
+    y ^= TEMPERING_SHIFT_S(y) & TEMPERING_MASK_B;
+    y ^= TEMPERING_SHIFT_T(y) & TEMPERING_MASK_C;
+    y ^= TEMPERING_SHIFT_L(y);
+
+    // Strip off uppermost bit because we want a long,
+    // not an unsigned long
+    return y & RAND_MAX;
+}
+
+// Assumes 0 <= max <= RAND_MAX
+// Returns in the half-open interval [0, max]
+long random_at_most(long max) {
+  unsigned long
+    // max <= RAND_MAX < ULONG_MAX, so this is okay.
+    num_bins = (unsigned long) max + 1,
+    num_rand = (unsigned long) RAND_MAX + 1,
+    bin_size = num_rand / num_bins,
+    defect   = num_rand % num_bins;
+
+  long x;
+  do {
+   x = genrand();
+  }
+  // This is carefully written not to overflow
+  while (num_rand - defect <= (unsigned long)x);
+
+  // Truncated division is intentional
+  return x/bin_size;
+}
diff --git a/kernel/rand.h b/kernel/rand.h
new file mode 100755
index 0000000..cb3083e
--- /dev/null
+++ b/kernel/rand.h
@@ -0,0 +1,3 @@
+void sgenrand(unsigned long);
+long genrand(void);
+long random_at_most(long);
\ No newline at end of file
diff --git a/kernel/syscall.c b/kernel/syscall.c
index ed65409..ce52e87 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -101,6 +101,8 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_link(void);
 extern uint64 sys_mkdir(void);
 extern uint64 sys_close(void);
+extern uint64 sys_settickets(void);
+extern uint64 sys_getpinfo(void);
 
 // An array mapping syscall numbers from syscall.h
 // to the function that handles the system call.
@@ -126,6 +128,8 @@ static uint64 (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_settickets] sys_settickets,
+[SYS_getpinfo] sys_getpinfo,
 };
 
 void
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..7926b7f 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -20,3 +20,5 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_settickets 22
+#define SYS_getpinfo 23
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index 1de184e..6b054ef 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -89,3 +89,30 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+
+uint64
+sys_settickets(void)
+{
+  int n;
+  argint(0, &n);
+
+  if(n < 0){
+    return -1;
+  }
+  else if(n == 0){
+    return settickets(DEFAULT_TICKET_COUNT);
+  }
+  else{
+    return settickets(n);
+  }
+}
+
+uint64
+sys_getpinfo(void)
+{
+  uint64 p;
+  argaddr(0, &p);
+  getpinfo(p);
+  return 0;
+}
diff --git a/user/dummyproc.c b/user/dummyproc.c
new file mode 100644
index 0000000..4f762f3
--- /dev/null
+++ b/user/dummyproc.c
@@ -0,0 +1,80 @@
+// #include "kernel/types.h"
+// #include "kernel/stat.h"
+// #include "user.h"
+
+
+// int main(int argc, char * argv[])
+// {
+//     // printf("\ttest_Ticket\n");
+
+//     // int number = atoi(argv[1]);
+//     // settickets(number);
+
+//     // while (1)
+//     // {
+//     //     /* code */
+//     // }
+
+//     // exit(0);//eq to return zero
+
+//     /**
+//      *
+//      * fork test
+//      *
+//      **/
+
+
+//     printf("testFork\n");
+
+//     int number = atoi(argv[1]);
+//     settickets(number);
+
+//     int val = fork();
+
+//     if(val == 0) printf("\nFork successful\n");
+//     else if (val < 0) printf("\nFork unsuccessful\n");
+
+//     while (1)
+//     {
+//         /* code */
+//     }
+
+//     exit(0);//eq to return zero
+
+// }
+
+
+
+#include "kernel/param.h"
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+int main(int argc, char *argv[])
+{
+    if(argc != 2){
+        printf("Usage: testticket <number of tickets>\n");
+        exit(1);
+    }
+    printf("Setting ticket\n");
+    int number = atoi(argv[1]);
+    if(settickets(number)==-1){
+        printf("Error setting ticket\n");
+        exit(1);
+    }
+    int rc = fork();
+    if(rc<0){
+        printf("Error forking\n");
+        exit(1);
+    }
+    else if(rc==0){
+
+        printf("Fork Successful");
+        // child process
+        while(1){
+            // running
+        }
+    }
+    // while loop to make sure the process is not terminated
+    exit(0);
+}
\ No newline at end of file
diff --git a/user/testprocinfo.c b/user/testprocinfo.c
new file mode 100644
index 0000000..2536db1
--- /dev/null
+++ b/user/testprocinfo.c
@@ -0,0 +1,46 @@
+// #include "kernel/types.h"
+// #include "kernel/stat.h"
+// #include "user.h"
+// #include "kernel/pstat.h"
+
+// int main(int argc, char *argv[])
+// {
+//     struct pstat ps;
+//     getpinfo(&ps);
+//     printf("\nPID\tINUSE\tTICKETS\t\tTICKS\n");
+//     for (int i = 0; i < NPROC; i++)
+//     {
+//         // if (ps.inuse[i])
+//         // if (ps.pid[i])
+//         // if (ps.pid[i] && ps)
+//         // {
+
+//         // }
+//         if(ps.pid[i] != 0){
+//             printf("%d\t%d\t%d\t\t%d\t\t%d\t\t%d\n", ps.pid[i], ps.inuse[i], ps.inQ[i], ps.tickets_original[i], ps.tickets_current[i], ps.time_slices[i]);
+//         }
+//         //printf("%d\t%d\t%d\t\t%d\n", ps.pid[i], ps.inuse[i], ps.tickets_current[i], ps.time_slices[i]);
+
+//     }
+//     exit(0);
+// }
+
+
+#include "kernel/param.h"
+#include "kernel/types.h"
+#include "kernel/pstat.h"
+#include "user/user.h"
+
+int main (int argc, char *argv[])
+{
+    printf("Printing process info\n");
+    printf("PID | In Use | InQ | Original Tickets | Current Tickets | Time Slices\n");
+    struct pstat pst;
+    getpinfo(&pst);
+    for (int i = 0; i < NPROC; i++) {
+        if (pst.inuse[i]) {
+            printf("%d\t%d\t%d\t\t%d\t\t%d\t\t%d\n", pst.pid[i], pst.inuse[i], pst.inQ[i]+1, pst.tickets_original[i], pst.tickets_current[i], pst.time_slices[i]);
+        }
+    }
+    exit(0);
+}
\ No newline at end of file
diff --git a/user/user.h b/user/user.h
index 4d398d5..59210a8 100644
--- a/user/user.h
+++ b/user/user.h
@@ -1,4 +1,5 @@
 struct stat;
+struct pstat;
 
 // system calls
 int fork(void);
@@ -39,3 +40,5 @@ void free(void*);
 int atoi(const char*);
 int memcmp(const void *, const void *, uint);
 void *memcpy(void *, const void *, uint);
+int settickets(int);
+int getpinfo(struct pstat*);
diff --git a/user/usys.pl b/user/usys.pl
index 01e426e..d2435c1 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,5 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("settickets");
+entry("getpinfo");
