diff --git a/.vscode/settings.json b/.vscode/settings.json
new file mode 100644
index 0000000..7c2299b
--- /dev/null
+++ b/.vscode/settings.json
@@ -0,0 +1,5 @@
+{
+    "files.associations": {
+        "stddef.h": "c"
+    }
+}
\ No newline at end of file
diff --git a/Makefile b/Makefile
index 39a99d7..56e96e1 100644
--- a/Makefile
+++ b/Makefile
@@ -24,6 +24,7 @@ OBJS = \
   $K/sleeplock.o \
   $K/file.o \
   $K/pipe.o \
+  $K/swap.o \
   $K/exec.o \
   $K/sysfile.o \
   $K/kernelvec.o \
@@ -132,6 +133,10 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
+	$U/_testfile1\
+	$U/_testfile2\
+	$U/_testfile3\
+	$U/_testfile4\
 
 fs.img: mkfs/mkfs README $(UPROGS)
 	mkfs/mkfs fs.img README $(UPROGS)
diff --git a/kernel/defs.h b/kernel/defs.h
index a3c962b..9985b32 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -8,6 +8,8 @@ struct spinlock;
 struct sleeplock;
 struct stat;
 struct superblock;
+struct swap;
+struct memory_page;
 
 // bio.c
 void            binit(void);
@@ -36,6 +38,8 @@ int             filewrite(struct file*, uint64, int n);
 
 // fs.c
 void            fsinit(int);
+uint            balloc(uint dev);
+void            bfree(int dev, uint b);
 int             dirlink(struct inode*, char*, uint);
 struct inode*   dirlookup(struct inode*, char*, uint*);
 struct inode*   ialloc(uint, short);
@@ -107,6 +111,14 @@ int             either_copyout(int user_dst, uint64 dst, void *src, uint64 len);
 int             either_copyin(void *dst, int user_src, uint64 src, uint64 len);
 void            procdump(void);
 
+// swap.c
+void            swapinit(void);
+void            swapfree(struct swap*);
+void            swapref(struct swap*);
+struct swap*    swapalloc(void);
+void            swapout(struct swap *dst_sp, char *src_pa);
+void            swapin(char *dst_pa, struct swap *src_sp);
+
 // swtch.S
 void            swtch(struct context*, struct context*);
 
@@ -185,5 +197,11 @@ void            virtio_disk_init(void);
 void            virtio_disk_rw(struct buf *, int);
 void            virtio_disk_intr(void);
 
+// page.c
+void            initialize_mempage();
+struct memory_page *allocate_page(pagetable_t, pte_t *, int, struct swap *);
+uint            count_live_pages();
+
+
 // number of elements in fixed-size array
 #define NELEM(x) (sizeof(x)/sizeof((x)[0]))
diff --git a/kernel/fs.c b/kernel/fs.c
index c6bab15..2d9b419 100644
--- a/kernel/fs.c
+++ b/kernel/fs.c
@@ -62,7 +62,7 @@ bzero(int dev, int bno)
 
 // Allocate a zeroed disk block.
 // returns 0 if out of disk space.
-static uint
+uint
 balloc(uint dev)
 {
   int b, bi, m;
@@ -88,7 +88,7 @@ balloc(uint dev)
 }
 
 // Free a disk block.
-static void
+void
 bfree(int dev, uint b)
 {
   struct buf *bp;
diff --git a/kernel/main.c b/kernel/main.c
index f0d3171..f61ff0a 100644
--- a/kernel/main.c
+++ b/kernel/main.c
@@ -19,6 +19,8 @@ main()
     kinit();         // physical page allocator
     kvminit();       // create kernel page table
     kvminithart();   // turn on paging
+    swapinit();
+    initialize_mempage();
     procinit();      // process table
     trapinit();      // trap vectors
     trapinithart();  // install kernel trap vector
diff --git a/kernel/proc.c b/kernel/proc.c
index 959b778..14d44e8 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -158,8 +158,6 @@ freeproc(struct proc *p)
   if(p->trapframe)
     kfree((void*)p->trapframe);
   p->trapframe = 0;
-  if(p->pagetable)
-    proc_freepagetable(p->pagetable, p->sz);
   p->pagetable = 0;
   p->sz = 0;
   p->pid = 0;
@@ -210,9 +208,11 @@ proc_pagetable(struct proc *p)
 void
 proc_freepagetable(pagetable_t pagetable, uint64 sz)
 {
-  uvmunmap(pagetable, TRAMPOLINE, 1, 0);
-  uvmunmap(pagetable, TRAPFRAME, 1, 0);
-  uvmfree(pagetable, sz);
+  if (pagetable) {
+    uvmunmap(pagetable, TRAMPOLINE, 1, 0);
+    uvmunmap(pagetable, TRAPFRAME, 1, 0);
+    uvmfree(pagetable, sz);
+  }
 }
 
 // a user program that calls exec("/init")
@@ -288,12 +288,17 @@ fork(void)
     return -1;
   }
 
+  // release lock so that swapin and swapout can be called
+  release(&np->lock);
   // Copy user memory from parent to child.
   if(uvmcopy(p->pagetable, np->pagetable, p->sz) < 0){
     freeproc(np);
-    release(&np->lock);
     return -1;
   }
+
+  acquire(&np->lock);
+  // re-enable interrupts
+
   np->sz = p->sz;
 
   // copy saved user registers.
@@ -414,9 +419,12 @@ wait(uint64 addr)
             release(&wait_lock);
             return -1;
           }
+          pagetable_t pt = pp->pagetable;
+          uint64 sz = pp->sz;
           freeproc(pp);
           release(&pp->lock);
           release(&wait_lock);
+          proc_freepagetable(pt, sz);
           return pid;
         }
         release(&pp->lock);
@@ -652,6 +660,10 @@ either_copyin(void *dst, int user_src, uint64 src, uint64 len)
   }
 }
 
+extern uint livepagecount;
+extern uint pagecount;
+extern uint swapcount;
+
 // Print a process listing to console.  For debugging.
 // Runs when user types ^P on console.
 // No lock to avoid wedging a stuck machine further.
@@ -680,4 +692,9 @@ procdump(void)
     printf("%d %s %s", p->pid, state, p->name);
     printf("\n");
   }
+
+  // mempagedump();
+  printf("Total number of alive pages: %d\n", livepagecount);
+  printf("Total number of pages: %d\n", pagecount);
+  printf("Total number of swaps: %d\n", swapcount);
 }
diff --git a/kernel/riscv.h b/kernel/riscv.h
index 20a01db..1aa952d 100644
--- a/kernel/riscv.h
+++ b/kernel/riscv.h
@@ -343,6 +343,7 @@ typedef uint64 *pagetable_t; // 512 PTEs
 #define PTE_W (1L << 2)
 #define PTE_X (1L << 3)
 #define PTE_U (1L << 4) // user can access
+#define PTE_S (1l << 9) // swapped out
 
 // shift a physical address to the right place for a PTE.
 #define PA2PTE(pa) ((((uint64)pa) >> 12) << 10)
diff --git a/kernel/swap.c b/kernel/swap.c
new file mode 100644
index 0000000..b9cd678
--- /dev/null
+++ b/kernel/swap.c
@@ -0,0 +1,154 @@
+#include "types.h"
+#include "riscv.h"
+#include "fs.h"
+#include "spinlock.h"
+#include "defs.h"
+#include "param.h"
+#include "sleeplock.h"
+#include "buf.h"
+
+#define NBLOCKPERPAGE (PGSIZE / BSIZE)
+
+uint swapcount = 0;
+
+struct swap {
+  uint blocknos[NBLOCKPERPAGE];
+  int ref_count;
+};
+
+struct run {
+  struct run *next;
+};
+
+struct {
+  struct spinlock lock;
+  struct run *freelist;
+} swapmem;
+
+// Initialize swapmem
+void
+swapinit(void)
+{
+  initlock(&swapmem.lock, "swapmem");
+  swapmem.freelist = 0;
+}
+
+// increase ref count of swap
+void
+swapref(struct swap *s)
+{
+  __sync_fetch_and_add(&s->ref_count, 1);
+}
+
+// Allocate one swap struct.
+// Returns a pointer to the swap struct.
+// Returns 0 if the memory cannot be allocated.
+struct swap *
+swapalloc(void)
+{
+  struct run *r;
+  struct swap *s;
+
+  acquire(&swapmem.lock);
+  r = swapmem.freelist;
+  if(!r){
+    release(&swapmem.lock);
+    char *mem = kalloc();
+    char *mem_end = mem + PGSIZE;
+    for(; mem + sizeof(struct swap) <= mem_end; mem += sizeof(struct swap)){
+      r = (struct run*)mem;
+
+      acquire(&swapmem.lock);
+      r->next = swapmem.freelist;
+      swapmem.freelist = r;
+      release(&swapmem.lock);
+    }
+    acquire(&swapmem.lock);
+    r = swapmem.freelist;
+  }
+  swapmem.freelist = r->next;
+  release(&swapmem.lock);
+
+  s = (struct swap*)r;
+  if(s){
+    memset((char*)s->blocknos, 0, sizeof(s->blocknos)); // fill with zeros
+    s->ref_count = 1;
+    __sync_fetch_and_add(&swapcount, 1);
+  }
+  return s;
+}
+
+// Free the swap struct pointed by s, and the blocks
+// contained in s, which normally should have been returned
+// by a call to swapalloc() and swapout().
+void
+swapfree(struct swap *s)
+{
+  __sync_fetch_and_add(&s->ref_count, -1);
+  if (__sync_bool_compare_and_swap(&s->ref_count, 0, 0)) {
+    uint *blockno;
+    struct run *r;
+
+    if(!s)
+      panic("swapfree");
+
+    begin_op();
+    for(blockno = s->blocknos; blockno < &s->blocknos[NBLOCKPERPAGE]; blockno++){
+      if(*blockno)
+        bfree(ROOTDEV, *blockno);
+    }
+    end_op();
+
+    r = (struct run*)s;
+
+    acquire(&swapmem.lock);
+    r->next = swapmem.freelist;
+    swapmem.freelist = r;
+    release(&swapmem.lock);
+    __sync_fetch_and_add(&swapcount, -1);
+  }
+}
+
+// Swap out a given physical page src_pa to disk.
+// The metadata for retriving src_pa will be saved
+// to dst_pa which normally should have been returned
+// by a call to swapalloc().
+void
+swapout(struct swap *dst_sp, char *src_pa)
+{
+  // printf("swapping out %p to %p\n", src_pa, dst_sp);
+
+  uint *blockno;
+  struct buf *bp;
+
+  begin_op();
+  for(blockno = dst_sp->blocknos; blockno < &dst_sp->blocknos[NBLOCKPERPAGE]; blockno++, src_pa += BSIZE){
+    *blockno = balloc(ROOTDEV);
+    if(*blockno == 0)
+      panic("swapout");
+    bp = bread(ROOTDEV, *blockno);
+    memmove(bp->data, src_pa, BSIZE);
+    log_write(bp);
+    brelse(bp);
+  }
+  end_op();
+}
+
+// Swap in a page into dst_pa from disk using src_sp.
+// src_sp should normally be updated with metadata
+// for retriving the page by a call to swapout().
+void
+swapin(char *dst_pa, struct swap *src_sp)
+{
+  // printf("swapping in %p from %p\n", dst_pa, src_sp);
+  uint *blockno;
+  struct buf *bp;
+
+  if(!dst_pa)
+    panic("swapin");
+  for(blockno = src_sp->blocknos; blockno < &src_sp->blocknos[NBLOCKPERPAGE]; blockno++, dst_pa += BSIZE){
+    bp = bread(ROOTDEV, *blockno);
+    memmove(dst_pa, bp->data, BSIZE);
+    brelse(bp);
+  }
+}
diff --git a/kernel/syscall.c b/kernel/syscall.c
index ed65409..f85e6d2 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -101,6 +101,8 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_link(void);
 extern uint64 sys_mkdir(void);
 extern uint64 sys_close(void);
+extern uint64 sys_livepgcnt(void);
+extern uint64 sys_swap_count(void);
 
 // An array mapping syscall numbers from syscall.h
 // to the function that handles the system call.
@@ -126,6 +128,8 @@ static uint64 (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_livepgcnt]      sys_livepgcnt,
+[SYS_swap_count]     sys_swap_count,
 };
 
 void
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..4e4824b 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -20,3 +20,5 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_livepgcnt      22
+#define SYS_swap_count     23
\ No newline at end of file
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index 1de184e..0846e17 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -6,6 +6,10 @@
 #include "spinlock.h"
 #include "proc.h"
 
+
+extern uint swapcount;
+
+
 uint64
 sys_exit(void)
 {
@@ -89,3 +93,15 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+uint64
+sys_livepgcnt(void)
+{
+  return count_live_pages();
+}
+
+uint64
+sys_swap_count(void)
+{
+  return swapcount;
+}
diff --git a/kernel/trap.c b/kernel/trap.c
index 512c850..7beedd8 100644
--- a/kernel/trap.c
+++ b/kernel/trap.c
@@ -65,6 +65,36 @@ usertrap(void)
     intr_on();
 
     syscall();
+  } else if(r_scause() == 12 || r_scause() == 13 || r_scause() == 15) {
+    // page fault
+    uint64 va = r_stval();
+    pte_t *pte = walk(p->pagetable, va, 0);
+
+    if (pte == 0) {
+      printf("usertrap(): segmentation fault. pid=%d\n", p->pid);
+      printf("            sepc=%p stval=%p\n", r_sepc(), r_stval());
+      setkilled(p);
+    } else {
+
+      int flags = PTE_FLAGS(*pte);
+      struct swap *s = (struct swap *)(*pte >> 10);
+
+      if (!(flags & PTE_S)) {
+        printf("usertrap(): unexpected pagefault. pid=%d\n", p->pid);
+        printf("            sepc=%p stval=%p\n", r_sepc(), r_stval());
+        setkilled(p);
+      } else {
+        /* swapped out page table entry */
+        // printf("Page fault at address: %p, swap: %p\n", va, s);
+        struct memory_page *mp;
+        if ((mp = allocate_page(p->pagetable, pte, flags, s)) == 0) {
+          printf("usertrap(): couldn't allocate memory_page. pid=%d\n", p->pid);
+          printf("            sepc=%p stval=%p\n", r_sepc(), r_stval());
+          setkilled(p);
+        }
+      }
+    }
+
   } else if((which_dev = devintr()) != 0){
     // ok
   } else {
diff --git a/kernel/vm.c b/kernel/vm.c
index 9f69783..e121b64 100644
--- a/kernel/vm.c
+++ b/kernel/vm.c
@@ -5,16 +5,40 @@
 #include "riscv.h"
 #include "defs.h"
 #include "fs.h"
+#include "spinlock.h"
+#include "proc.h"
+#include "stddef.h"
 
+//#define MAXPAGES 50
 /*
  * the kernel's page table.
  */
+
+#define MAXPAGES 50
+struct memory_page {
+  void *pa;
+  void *va;
+  pte_t	*pte;
+  pagetable_t pagetable;
+  struct memory_page *next, *prev;        // For linked list implementation
+} pages[MAXPAGES];
+
+
+static struct memory_page *free;
+static struct memory_page *head, *tail;
+
+//struct spinlock swap_lock;
+
+uint livepagecount = 0;
+
 pagetable_t kernel_pagetable;
 
 extern char etext[];  // kernel.ld sets this to end of kernel code.
 
 extern char trampoline[]; // trampoline.S
 
+uint pagecount = 0;
+
 // Make a direct-map page table for the kernel.
 pagetable_t
 kvmmake(void)
@@ -135,6 +159,217 @@ kvmmap(pagetable_t kpgtbl, uint64 va, uint64 pa, uint64 sz, int perm)
     panic("kvmmap");
 }
 
+struct spinlock swap_lock;
+
+void
+initialize_mempage()
+{
+	initlock(&swap_lock, "swap");
+ 	free = pages;
+	for (int i = 0; i < MAXPAGES - 1; i++) {
+		pages[i].next = &pages[i + 1];
+	}
+	pages[MAXPAGES - 1].next = NULL;
+	head = NULL;
+	tail = NULL;
+}
+
+struct memory_page* 
+allocate_page(pagetable_t pagetable, pte_t *pte, int flags, struct swap *oldsw)
+{
+    struct memory_page *p;
+
+    acquire(&swap_lock);
+
+    // Check if there is a free page in memory
+    if (free == NULL) {
+        // Freelist is empty, so we need to swap out a page to make space
+        struct swap *sw = swapalloc();
+
+        if (!sw) {
+            // No available swap space, release lock and return NULL
+            release(&swap_lock);
+            return NULL;
+        }
+
+        // Find a page to swap out
+        p = head;
+		    head = head->next;
+		    head->prev = NULL;
+
+        if (!p) {
+            // No page available for swapping, release swap space and lock, return NULL
+            swapfree(sw);
+            release(&swap_lock);
+            return NULL;
+        }
+
+        // Always release the lock before swapping out a page
+        release(&swap_lock);
+
+        // Swap out the page
+        swapout(sw, p->pa);
+
+        // Reacquire the lock after swapping out
+        acquire(&swap_lock);
+
+        // Update the page table entry to point to the swap space
+        int flags = PTE_FLAGS(*p->pte);
+        *(p->pte) = ((uint64)sw << 10 | flags | PTE_S) & ~(PTE_V);
+    } else {
+        // There is a free page in memory
+        p = free;
+        free = free->next;
+
+        if (p->pa == NULL) {
+            // Page is not yet allocated, allocate it now
+            if ((p->pa = kalloc()) == 0) {
+                // Memory allocation failed, release lock and return NULL
+                free = p;
+                release(&swap_lock);
+                return NULL;
+            }
+        }
+
+        livepagecount++;
+    }
+
+    // Push the page to the end of the queue
+    if (!head) {
+        head = p;
+    }
+
+    p->prev = tail;
+    p->next = NULL;
+
+    if (tail) {
+        tail->next = p;
+    }
+    tail = p;
+
+    // Update the page table entry to map to the allocated physical page
+    *pte = (PA2PTE(p->pa) | flags | PTE_V) & ~(PTE_S);
+
+    p->pagetable = pagetable;
+    p->pte = pte;
+
+    release(&swap_lock);
+
+    // Clear the page contents
+    memset(p->pa, 0, PGSIZE);
+
+    // If we need to swap in
+    if (oldsw) {
+        swapin(p->pa, oldsw);
+        swapfree(oldsw);
+    } else {
+        pagecount++;
+    }
+
+    return p;
+}
+
+void
+free_mempage_struct(struct memory_page *p, int lock)
+{	
+	if(lock){
+		acquire(&swap_lock);
+	}
+	pte_t *pte = p->pte;
+	int flags = PTE_FLAGS(*pte);
+
+	if (flags & PTE_S) {
+		panic("Swapped out page in alive pages list");
+	}
+
+	/* unmap pagetable entry */
+	/* but keep flags to avoid panics */
+	/* leave it to uvmunmap to clear flags */
+	*pte = flags;
+
+	/* remove linked list node */
+	if (p->prev) {
+		p->prev->next = p->next;
+	} else {
+		head = p->next;
+	}
+	if (p->next) {
+		p->next->prev = p->prev;
+	} else {
+		tail = p->prev;
+	}
+
+	/* add to free list */
+	p->next = free;
+	free = p;
+
+	/* reset pagetable and pte */
+	p->pagetable = NULL;
+	p->pte = NULL;
+
+	livepagecount--;
+	pagecount--;
+	if(lock){
+		release(&swap_lock);
+	}
+}
+
+uint
+count_live_pages()
+{
+	struct memory_page *p;
+	struct proc *pp = myproc();
+	uint count = 0;
+
+	acquire(&swap_lock);
+	/* free all the memory_page with given pagetable */
+	p = head;
+	while(p){
+		if(p->pagetable == pp->pagetable){
+			count++;
+		}
+		p = p->next;
+	}
+	release(&swap_lock);
+
+	return count;
+}
+
+int
+copy_memory_page(pte_t *pte, uint64 pa, char *dst)
+{
+	acquire(&swap_lock);
+	if (PTE2PA(*pte) != pa) {
+		release(&swap_lock);
+		return -1;
+	}
+	memmove(dst, (char *)pa, PGSIZE);
+	release(&swap_lock);
+	return 0;
+}
+
+
+// ensure page associated with va is loaded into memory
+static int
+load_page_va(pagetable_t page, uint64 va)
+{
+  pte_t *pte = walk(page, va, 0);
+  int flags = PTE_FLAGS(*pte);
+
+  if (((*pte) & PTE_V) == 0 && ((*pte) & PTE_S) == 0) {
+    panic("load_page_va: page invalid");
+  }
+
+  if ((*pte) & PTE_S) {
+    struct memory_page *p;
+    struct swap *s = (struct swap *) (*pte >> 10);
+    if ((p = allocate_page(page, pte, flags, s)) == 0) {
+      return -1;
+    }
+  }
+  return 0;
+}
+
 // Create PTEs for virtual addresses starting at va that refer to
 // physical addresses starting at pa. va and size might not
 // be page-aligned. Returns 0 on success, -1 if walk() couldn't
@@ -179,13 +414,45 @@ uvmunmap(pagetable_t pagetable, uint64 va, uint64 npages, int do_free)
   for(a = va; a < va + npages*PGSIZE; a += PGSIZE){
     if((pte = walk(pagetable, a, 0)) == 0)
       panic("uvmunmap: walk");
-    if((*pte & PTE_V) == 0)
+    if((*pte & PTE_V) == 0 && (*pte & PTE_S) == 0)
       panic("uvmunmap: not mapped");
     if(PTE_FLAGS(*pte) == PTE_V)
       panic("uvmunmap: not a leaf");
     if(do_free){
-      uint64 pa = PTE2PA(*pte);
-      kfree((void*)pa);
+      int flags = PTE_FLAGS(*pte);
+      if (flags & PTE_S) {
+        swapfree((struct swap *)(*pte >> 10));
+        pagecount--;
+      } else {
+        uint64 pa = PTE2PA(*pte);
+        // may be freed already by a call to freemempages
+        if (pa) {
+          //freemempage(pte, NULL);
+          flags = PTE_FLAGS(*pte);
+          if(flags & PTE_S){
+            panic("Already swapped page is being freed");
+          }
+
+          if(!(flags & PTE_V)){
+            panic("Invalid page is being freed");
+          }
+
+          struct memory_page *p, *next;
+
+          // Finding the node with the pte
+          acquire(&swap_lock);
+          p = head;
+          while(p){
+            next = p->next;
+            if(p->pte == pte){
+              free_mempage_struct(p, 0);
+              break;
+            }
+            p = next;
+          }
+          release(&swap_lock);
+        }
+      }
     }
     *pte = 0;
   }
@@ -210,13 +477,20 @@ uvmcreate()
 void
 uvmfirst(pagetable_t pagetable, uchar *src, uint sz)
 {
-  char *mem;
+  struct memory_page *p;
 
   if(sz >= PGSIZE)
     panic("uvmfirst: more than a page");
-  mem = kalloc();
+  pte_t *pte = walk(pagetable, 0, 1);
+  int flags = PTE_W|PTE_R|PTE_X|PTE_U;
+
+  if((p = allocate_page(pagetable, pte, flags, NULL)) == 0) {
+    panic("uvmfirst: couldn't allocate memory_page");
+  }
+
+  void *mem = p->pa;
+
   memset(mem, 0, PGSIZE);
-  mappages(pagetable, 0, PGSIZE, (uint64)mem, PTE_W|PTE_R|PTE_X|PTE_U);
   memmove(mem, src, sz);
 }
 
@@ -225,7 +499,6 @@ uvmfirst(pagetable_t pagetable, uchar *src, uint sz)
 uint64
 uvmalloc(pagetable_t pagetable, uint64 oldsz, uint64 newsz, int xperm)
 {
-  char *mem;
   uint64 a;
 
   if(newsz < oldsz)
@@ -233,17 +506,18 @@ uvmalloc(pagetable_t pagetable, uint64 oldsz, uint64 newsz, int xperm)
 
   oldsz = PGROUNDUP(oldsz);
   for(a = oldsz; a < newsz; a += PGSIZE){
-    mem = kalloc();
-    if(mem == 0){
+    pte_t *pte = walk(pagetable, a, 1);
+    if (pte == 0) {
       uvmdealloc(pagetable, a, oldsz);
       return 0;
     }
-    memset(mem, 0, PGSIZE);
-    if(mappages(pagetable, a, PGSIZE, (uint64)mem, PTE_R|PTE_U|xperm) != 0){
-      kfree(mem);
+    int flags = PTE_R|PTE_U|xperm;
+    struct memory_page *p;
+    if ((p = allocate_page(pagetable, pte, flags, NULL)) == 0) {
       uvmdealloc(pagetable, a, oldsz);
       return 0;
     }
+    memset(p->pa, 0, PGSIZE);
   }
   return newsz;
 }
@@ -291,8 +565,28 @@ freewalk(pagetable_t pagetable)
 void
 uvmfree(pagetable_t pagetable, uint64 sz)
 {
-  if(sz > 0)
+  if(sz > 0) {
+    // free all mempages associated with pagetable to void having to iterate
+    // the list everytime
+
+    struct memory_page *p, *next;
+
+    acquire(&swap_lock);
+
+    p = head;
+
+    while(p){
+      next = p->next;
+      if(p->pagetable == pagetable){
+        free_mempage_struct(p, 0);
+      }
+      p = next;
+    }
+
+    release(&swap_lock);
+    // free remaining possibly swap pages
     uvmunmap(pagetable, 0, PGROUNDUP(sz)/PGSIZE, 1);
+  }
   freewalk(pagetable);
 }
 
@@ -308,22 +602,44 @@ uvmcopy(pagetable_t old, pagetable_t new, uint64 sz)
   pte_t *pte;
   uint64 pa, i;
   uint flags;
-  char *mem;
 
   for(i = 0; i < sz; i += PGSIZE){
     if((pte = walk(old, i, 0)) == 0)
       panic("uvmcopy: pte should exist");
-    if((*pte & PTE_V) == 0)
+    if((*pte & PTE_V) == 0 && (*pte & PTE_S) == 0)
       panic("uvmcopy: page not present");
+    if((*pte & PTE_V) != 0 && (*pte & PTE_S) != 0)
+      panic("uvmcopy: page valid and in swap");
     pa = PTE2PA(*pte);
     flags = PTE_FLAGS(*pte);
-    if((mem = kalloc()) == 0)
-      goto err;
-    memmove(mem, (char*)pa, PGSIZE);
-    if(mappages(new, i, PGSIZE, (uint64)mem, flags) != 0){
-      kfree(mem);
+
+    pte_t *new_pte = walk(new, i, 1);
+    if (new_pte == 0) {
       goto err;
     }
+
+    if (flags & PTE_S) {
+
+      // Increase reference count of swap, because we have found a pte where the entry is a swap struct. Used for step 6
+      struct swap *s = (struct swap *) (*pte >> 10);
+      *new_pte = *pte;
+      swapref(s);           // Increase the reference count
+      pagecount++;
+    } else {
+
+      // pte doesn't contain a swap struct. Allocate normally
+      struct memory_page *p;
+      if((p = allocate_page(new, new_pte, flags, NULL)) == 0)
+        goto err;
+        
+      if (copy_memory_page(pte, pa, p->pa) != 0) {
+        free_mempage_struct(p, 1);
+        struct swap *s = (struct swap *) (*pte >> 10);
+        *new_pte = *pte;
+        swapref(s);
+        pagecount++;
+      }
+    }
   }
   return 0;
 
@@ -353,6 +669,10 @@ copyout(pagetable_t pagetable, uint64 dstva, char *src, uint64 len)
 {
   uint64 n, va0, pa0;
 
+  if (load_page_va(pagetable, dstva) < 0) {
+    return -1;
+  }
+
   while(len > 0){
     va0 = PGROUNDDOWN(dstva);
     pa0 = walkaddr(pagetable, va0);
@@ -378,6 +698,10 @@ copyin(pagetable_t pagetable, char *dst, uint64 srcva, uint64 len)
 {
   uint64 n, va0, pa0;
 
+  if (load_page_va(pagetable, srcva) < 0) {
+    return -1;
+  }
+
   while(len > 0){
     va0 = PGROUNDDOWN(srcva);
     pa0 = walkaddr(pagetable, va0);
@@ -405,6 +729,10 @@ copyinstr(pagetable_t pagetable, char *dst, uint64 srcva, uint64 max)
   uint64 n, va0, pa0;
   int got_null = 0;
 
+  if (load_page_va(pagetable, srcva) < 0) {
+    return -1;
+  }
+
   while(got_null == 0 && max > 0){
     va0 = PGROUNDDOWN(srcva);
     pa0 = walkaddr(pagetable, va0);
diff --git a/user/testfile1.c b/user/testfile1.c
new file mode 100755
index 0000000..999a479
--- /dev/null
+++ b/user/testfile1.c
@@ -0,0 +1,55 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+#include "kernel/fcntl.h"
+
+void step_2(int num_pages)
+{
+    int page_size = 4096;
+    int array_size = num_pages * page_size;
+
+    char *array = malloc(array_size);
+    if (array == 0)
+    {
+        printf("Failed to allocate memory\n");
+        exit(1);
+    }
+
+    printf("Writing...\n");
+
+    // A simple loop that takes some time to execute
+    for (int i = 0; i < array_size; i++)
+    {
+        array[i] = i % 256;
+    }
+
+    printf("Sleeping...\n");
+    sleep(10);
+
+    printf("Reading...\n");
+
+    int a = 0;
+    for (int i = 0; i < array_size; i++)
+    {
+        a = array[i];
+    }
+    printf("%d\n", a);
+
+    printf("live pages used by process: %d, pid: %d swapped pages %d\n", livepgcnt(), getpid(), swap_count());
+
+    free(array);
+    printf("Done\n");
+}
+
+int main(int argc, char *argv[])
+{
+
+    int num_pages = 5;
+    // takes the number of pages through command line
+    if (argc > 1)
+    {
+        num_pages = atoi(argv[1]);
+    }
+    step_2(num_pages);
+    exit(0);
+}
\ No newline at end of file
diff --git a/user/testfile2.c b/user/testfile2.c
new file mode 100755
index 0000000..76df49f
--- /dev/null
+++ b/user/testfile2.c
@@ -0,0 +1,30 @@
+#include "kernel/param.h"
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+#include "kernel/fs.h"
+#include "kernel/fcntl.h"
+#include "kernel/syscall.h"
+#include "kernel/memlayout.h"
+#include "kernel/riscv.h"
+
+int main(int argc, char *argv[])
+{
+
+  printf("Using sbrk() with positive argument,we request additional memory for growing heap,so after growing the number of swapped pages should increase\n\n");
+  printf("Using sbrk() with negative argument we are releasing memory ,so,after shrinking the number of swapped pages should decrease\n\n");
+  printf("before growing: live pages used by process: %d, pid: %d swapped pages %d\n", livepgcnt(), getpid(), swap_count());
+
+  void *ptr = sbrk(1000000);
+
+  printf("after growing: live pages used by process: %d, pid: %d swapped pages %d\n", livepgcnt(), getpid(), swap_count());
+
+  char *end = (char *)ptr + 99999;
+  *end = 42;
+
+  sbrk(-1000000);
+
+  printf("after shrinking: live pages used by process: %d, pid: %d swapped pages %d\n", livepgcnt(), getpid(), swap_count());
+
+  return 0;
+}
diff --git a/user/testfile3.c b/user/testfile3.c
new file mode 100755
index 0000000..ab35cb2
--- /dev/null
+++ b/user/testfile3.c
@@ -0,0 +1,72 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+#include "kernel/fcntl.h"
+
+void step_2(int num_pages)
+{
+    int page_size = 4096;
+    int array_size = num_pages * page_size;
+    char *array = malloc(array_size);
+    if (array == 0)
+    {
+        printf("Failed to allocate memory\n");
+        exit(1);
+    }
+
+    // memset(array, 0, array_size);
+
+    printf("Writing...\n");
+
+    // A simple loop that takes some time to execute
+    for (int i = 0; i < array_size; i++)
+    {
+        array[i] = i % 256;
+    }
+
+    printf("Sleeping...\n");
+    sleep(10);
+    //   printf("live pages used by process: %d, pid: %d\n", livepgcnt(), getpid());
+
+    printf("Reading...\n");
+    printf("Before fork : live pages used by process: %d, pid: %d swapped pages %d\n", livepgcnt(), getpid(), swap_count());
+
+    if (fork() == 0)
+    {
+        printf("Info:\n");
+    }
+    else
+    {
+        wait(0);
+    }
+    int a = 0;
+    for (int i = 0; i < array_size; i++)
+    {
+        a = array[i];
+    }
+    printf("%d\n", a);
+
+    char *array2 = malloc(array_size * 2);
+    for (int i = 0; i < array_size * 2; i++)
+    {
+        array2[i] = i % 128;
+    }
+    printf("after fork : live pages used by process: %d, pid: %d swapped pages %d\n", livepgcnt(), getpid(), swap_count());
+
+    free(array);
+    printf("Done\n");
+}
+
+int main(int argc, char *argv[])
+{
+    printf("Here we test fork().So,before fork(),the parent process is big enough that some pages have already been swapped out\n");
+    printf("So,then the child process has to access a swapped out page from the parent process.");
+
+    int num_pages = 38;
+    if (argc > 1)
+    {
+        num_pages = atoi(argv[1]);
+    }
+    step_2(num_pages);
+    exit(0);
+}
\ No newline at end of file
diff --git a/user/testfile4.c b/user/testfile4.c
new file mode 100755
index 0000000..d8d65a8
--- /dev/null
+++ b/user/testfile4.c
@@ -0,0 +1,49 @@
+#include "kernel/param.h"
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+#include "kernel/fs.h"
+#include "kernel/fcntl.h"
+#include "kernel/syscall.h"
+#include "kernel/memlayout.h"
+#include "kernel/riscv.h"
+
+int main(int argc, char *argv[])
+{
+  printf("Here,after calling sbrk() with positive argument,we have extended the heap by allocating more memory,so some pages have been swapped \n\n");
+  printf("and then we call fork(),so the child also has some pages that have been swapped\n\n");
+  printf("Then we call sbrk() with negative argument,so we have released the memory\n\n");
+  printf("so the swapped pages are now swaped in by both parent and child.As we are keeping the reference count,the code works perfectly .Because we only free a swap structure when its reference count is 0");
+
+  printf("before growing: live pages used by process: %d, pid: %d swapped pages %d\n", livepgcnt(), getpid(), swap_count());
+
+  void *ptr = sbrk(1000000);
+  printf("after growing (before fork): live pages used by process: %d, pid: %d swapped pages %d\n", livepgcnt(), getpid(), swap_count());
+
+  if (fork() == 0)
+  {
+    sleep(2);
+
+    printf("after growing(after fork): live pages used by process: %d, pid: %d swapped pages %d\n", livepgcnt(), getpid(), swap_count());
+
+    char *end = (char *)ptr + 99999;
+    *end = 42;
+
+    sbrk(-1000000);
+
+    printf("after shrinking: live pages used by process: %d, pid: %d swapped pages %d\n", livepgcnt(), getpid(), swap_count());
+  }
+  else
+  {
+
+    printf("after growing(after fork): live pages used by process: %d, pid: %d swapped pages %d\n", livepgcnt(), getpid(), swap_count());
+
+    char *end = (char *)ptr + 99999;
+    *end = 42;
+
+    sbrk(-1000000);
+
+    printf("after shrinking: live pages used by process: %d, pid: %d swapped pages %d\n", livepgcnt(), getpid(), swap_count());
+  }
+  return 0;
+}
diff --git a/user/user.h b/user/user.h
index 4d398d5..386779d 100644
--- a/user/user.h
+++ b/user/user.h
@@ -22,6 +22,8 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+uint livepgcnt(void);
+uint swap_count(void);
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/user/usys.pl b/user/usys.pl
index 01e426e..d8c01cf 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,5 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("livepgcnt");
+entry("swap_count");
